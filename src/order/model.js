const mongoose = require("mongoose");

const serviceSchema = new mongoose.Schema(
  {
    serviceProvider: {
      type: mongoose.Types.ObjectId,
      ref: "ServiceProvider",
    },
    customer: {
      type: mongoose.Types.ObjectId,
      ref: "Customer",
    },
    carrier: {
      type: mongoose.Types.ObjectId,
      ref: "Carrier",
      default: null,
    },
    orderId: { type: Number },
    orderNumber: { type: String },
    orderKey: { type: String },
    orderDate: { type: Date },
    paymentDate: { type: Date },
    shipByDate: { type: Date },
    orderStatus: { type: String },
    customerUsername: { type: String },
    customerEmail: { type: String },
    billTo: {
      name: { type: String },
      company: { type: String },
      street1: { type: String },
      street2: { type: String },
      street3: { type: String },
      city: { type: String },
      state: { type: String },
      postalCode: { type: String },
      country: { type: String },
      phone: { type: String },
      residential: { type: String },
      addressVerified: { type: String },
    },
    shipTo: {
      name: { type: String },
      company: { type: String },
      street1: { type: String },
      street2: { type: String },
      street3: { type: String },
      city: { type: String },
      state: { type: String },
      postalCode: { type: String },
      country: { type: String },
      phone: { type: String },
      residential: { type: String },
      addressVerified: { type: String },
    },
    //items:
    amountPaid: { type: Number },
    taxAmount: { type: Number },
    shippingAmount: { type: Number },
    customerNotes: { type: String },
    internalNotes: { type: String },
    gift: { type: Boolean },
    giftMessage: { type: String },
    paymentMethod: { type: String },
    requestedShippingService: { type: String },
    carrierCode: { type: String },
    serviceCode: { type: String },
    packageCode: { type: String },
    confirmation: { type: String },
    shipDate: { type: Date },
    weight: {
      value: { type: Number },
      units: { type: String },
      WeightUnits: { type: Number },
    },
    dimensions: {
      length: { type: Number },
      width: { type: Number },
      height: { type: Number },
      units: { type: String },
    },
    advancedOptions: {
      warehouseId: { type: Number },
      nonMachinable: { type: Boolean },
      saturdayDelivery: { type: Boolean },
      containsAlcohol: { type: Boolean },
      mergedOrSplit: { type: Boolean },
      mergedIds: [],
      parentId: {},
      storeId: { type: Number },
      customField1: { type: String },
      customField2: { type: String },
      customField3: { type: String },
      source: { type: String },
      billToParty: { type: String },
      billToAccount: { type: String },
      billToPostalCode: { type: String },
      billToCountryCode: { type: String },
      billToMyOtherAccount: { type: String },
    },
    //internationalOptions
    customsCountryCode: { type: String },
    //advancedOptions,
    // tagIds
  },
  { timestamps: true }
);

module.exports = mongoose.model("Order", serviceSchema);
