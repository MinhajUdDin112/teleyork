const Joi = require("joi");
module.exports = {
  verifyZip: Joi.object({
    csr: Joi.string().required(),
    zipCode: Joi.string().required(),
    carrier: Joi.string().required(),
    serviceProvider: Joi.string().required(),
    //department: Joi.string().required(),
    accountType: Joi.string().required(),
  }),
  PWGverifyZip: Joi.object({
    csr: Joi.string().required(),
    zipCode: Joi.string().required(),
    carrier: Joi.string().required(),
    serviceProvider: Joi.string().required(),
    department: Joi.string().required(),
    accountType: Joi.string().required(),
  }),
  initialInformation: Joi.object({
    alternateContact: Joi.string().empty(""),
    salesChannel: Joi.string().required(),
    csr: Joi.string().required(),
    userId: Joi.string().required(),
    firstName: Joi.string().required(),
    middleName: Joi.string().empty(""),
    lastName: Joi.string().required(),
    suffix: Joi.string().empty(""),
    SSN: Joi.string().pattern(/^[0-9]{4}$/),
    DOB: Joi.date().iso().max("now"),
    bestWayToReach: Joi.string().required(),
    drivingLicense: Joi.string().empty(""),
    email: Joi.string().email().required(),
    contact: Joi.string().required(),
    isSelfReceive: Joi.boolean(),
    izZipVerified: Joi.boolean(),
    isReadyToGetServices: Joi.boolean(),
    isACP: Joi.boolean().required(),
    ESim: Joi.boolean().required(),
    BenifitFirstName: Joi.string().allow(""),
    BenifitMiddleName: Joi.string().allow(""),
    BenifitLastName: Joi.string().allow(""),
    BenifitSSN: Joi.string()
      .pattern(/^[0-9]{4}$/)
      .allow(""),
    BenifitDOB: Joi.date().iso().max("now").allow(""),
    accountType: Joi.string().required(),
    maidenMotherName: Joi.string().empty(""),
  }),
  homeAddressValidation: Joi.object({
    csr: Joi.string().required(),
    userId: Joi.string().required(),
    address1: Joi.string().required(),
    address2: Joi.string().empty(""),
    city: Joi.string().required(),
    zip: Joi.string().required(),
    state: Joi.string().required(),
    isSameServiceAddress: Joi.boolean(),
    isNotSameServiceAddress: Joi.boolean(),
    isPoBoxAddress: Joi.boolean(),
    mailingAddress1: Joi.string().empty(""),
    mailingAddress2: Joi.string().empty(""),
    PoBoxAddress: Joi.string().empty(""),
    mailingZip: Joi.string().empty(""),
    mailingCity: Joi.string().empty(""),
    mailingState: Joi.string().empty(""),
    poBoxZip: Joi.string().empty(""),
    poBoxCity: Joi.string().empty(""),
    poBoxState: Joi.string().empty(""),
  }),
  question: Joi.object({
    csr: Joi.string().required(),
    userId: Joi.string().required(),
    livesWithAnotherAdult: Joi.boolean().required(),
    hasAffordableConnectivity: Joi.boolean().required(),
    isSharesIncomeAndExpense: Joi.boolean().required(),
  }),
  // q2: Joi.object({
  //   userId: Joi.string().required(),
  //   hasAffordableConnectivity: Joi.boolean().required(),
  // }),
  // q3: Joi.object({
  //   userId: Joi.string().required(),
  //   isSharesIncomeAndExpense: Joi.boolean().required(),
  // }),
  selectProgram: Joi.object({
    csr: Joi.string().required(),
    userId: Joi.string().required(),
    program: Joi.string().required(),
  }),
  termsAndConditions: Joi.object({
    csr: Joi.string().required(),
    userId: Joi.string().required(),
  }),
  selectPlan: Joi.object({
    csr: Joi.string().required(),
    userId: Joi.string().required(),
    plan: Joi.string().required(),
  }),
  handOver: Joi.object({
    csr: Joi.string().required(),
    userId: Joi.string().required(),
  }),
  prepaidhandOver: Joi.object({
    csr: Joi.string().required(),
    userId: Joi.string().required(),
    isWithInvoice: Joi.boolean().required(),
    isWithoutInvoice: Joi.boolean().required(),
  }),
  remarks: Joi.object({
    enrollmentId: Joi.string().required(),
    comRemarks: Joi.string().required(),
    confidenceRemarks: Joi.string().required(),
    verificationRemarks: Joi.string().required(),
    informationRemarks: Joi.string().required(),
    disclaimerRemarks: Joi.string().required(),
    DOBRemarks: Joi.string().required(),
    callDropRemarks: Joi.boolean().required(),
    callQualityRemarks: Joi.string().required(),
    csrRemarks: Joi.boolean().required(),
    remarksComment: Joi.string().allow(""),
  }),
  NLADTransactionReport: Joi.object({
    sac: Joi.string().required(),
    startDate: Joi.date().iso().max("now").required(),
    endDate: Joi.date().iso().max("now").required(),
  }),
  validateSignup: Joi.object({
    fullName: Joi.string().required(),
    contact: Joi.string().required().min(10).max(15),
    email: Joi.string().email().required(),
    serviceProvider: Joi.string().required(),
    address: Joi.string().required(),
    SSN: Joi.string().pattern(/^[0-9]{4}$/),
    DOB: Joi.date().iso().max("now"),
    alternateContact: Joi.string().empty(""),
  }),
  validateEmailOtp: Joi.object({
    email: Joi.string().email().required(),
    otpEmail: Joi.string().required(),
    serviceProvider: Joi.string().required(),
  }),
  validateContactOtp: Joi.object({
    contact: Joi.string().required(),
    otpContact: Joi.string().required(),
    serviceProvider: Joi.string().required(),
  }),
  validatePasswordUpdate: Joi.object({
    email: Joi.string().email().required(),
    contact: Joi.string().required(),
    password: Joi.string().min(4).required(),
    confirmPassword: Joi.string().min(4).required(),
    serviceProvider: Joi.string().required(),
  }),
  validatePasswordUpdateReset: Joi.object({
    email: Joi.string().email(),
    contact: Joi.string(),
    password: Joi.string().min(4).required(),
    confirmPassword: Joi.string().min(4).required(),
    serviceProvider: Joi.string().required(),
  }),
  validateContactOtpResend: Joi.object({
    contact: Joi.string().required(),
    serviceProvider: Joi.string().required(),
  }),
  validateEmailOtpResend: Joi.object({
    email: Joi.string().required(),
    serviceProvider: Joi.string().required(),
  }),
  userProfile: Joi.object({
    fullName: Joi.string().required(),
    address: Joi.string().required(),
    SSN: Joi.string().pattern(/^[0-9]{4}$/),
    DOB: Joi.date().iso().max("now"),
    alternateContact: Joi.string().empty(""),
    contact: Joi.string().required(),
  }),
};
